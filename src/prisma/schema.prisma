generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  password    String
  role        Role         @default(USER)
  profile     Profile?
  assessments Assessment[] // Assessments created by the user (if admin)
  results     Result[] // Results of assessments taken by the user
  payments    Payment[] // Payment records
  enrollments Enrollment[]
  isVerified  Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum Role {
  USER
  ADMIN
}

model Profile {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int       @unique
  fullName    String
  address     String?
  dateOfBirth DateTime?
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Assessment {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  imageUrl    String?
  duration    Int // Duration of the assessment in minutes
  userId      Int // Created by id of admin user
  createdBy   User         @relation(fields: [userId], references: [id])
  price       Float
  isActive    Boolean      @default(true)
  questions   Question[] // Questions related to this assessment
  results     Result[] // Results of the assessment
  enrollments Enrollment[] // People enrolled on the assessment
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Question {
  id           Int          @id @default(autoincrement())
  order        Int
  assessmentId Int
  assessment   Assessment   @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  text         String       @db.Text
  type         QuestionType
  options      Json? // For multiple choice questions
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SCALE
}

model Result {
  id           Int          @id @default(autoincrement())
  userId       Int
  user         User         @relation(fields: [userId], references: [id])
  assessmentId Int
  assessment   Assessment   @relation(fields: [assessmentId], references: [id])
  score        Json
  timeDuration Int
  answers      Json // User's answers
  status       ResultStatus @default(IN_PROGRESS)
  skills       Json?
  startedAt    DateTime
  completedAt  DateTime     @default(now())
}

enum ResultStatus {
  IN_PROGRESS
  COMPLETED
  EXPIRED
}

model Payment {
  id               Int           @id @default(autoincrement())
  userId           Int
  user             User          @relation(fields: [userId], references: [id])
  amount           Float
  status           PaymentStatus
  transactionId    String        @unique // To track payments with Midtrans
  transactionToken String
  paymentMethod    String
  enrollments      Enrollment[]
  createdAt        DateTime      @default(now())
  expireAt         DateTime
  updatedAt        DateTime      @updatedAt

  @@index([status])
  @@index([transactionId])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Enrollment {
  id           Int              @id @default(autoincrement())
  userId       Int
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  assessmentId Int
  assessment   Assessment       @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  payment      Payment          @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  paymentId    Int
  status       EnrollmentStatus @default(ACTIVE)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@unique([userId, assessmentId])
  @@index([status])
}

enum EnrollmentStatus {
  ACTIVE
  REVOKED
  PENDING
}
